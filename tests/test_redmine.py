"""
Tests pour la connexion √† Redmine et la r√©cup√©ration des informations utilisateur.

Ce module effectue les tests suivants :
‚úÖ V√©rification de la connexion √† Redmine
‚úÖ V√©rification que l'utilisateur connect√© poss√®de un login et une adresse e-mail
‚úÖ V√©rification de la r√©cup√©ration des tickets assign√©s √† l'utilisateur
‚úÖ Test de cr√©ation d'une entr√©e de temps sur un ticket
"""

import datetime
import pytest
from redminelib import Redmine
from redminelib.exceptions import AuthError, ResourceNotFoundError

# üîπ Remplace avec l'URL de ton serveur Redmine et une cl√© API valide
REDMINE_URL = "https://redmine.esante-guyane.fr"
API_KEY = "2de7244c1d584248e1765afb740d4e80c80dd702"

class RdUser:
    """Classe contenant les informations de l'utilisateur Redmine."""
    pseudo = ""
    email = ""
    user_id = None
    projects = {}
    issues = {}

@pytest.fixture(scope="module")
def redmine_client():
    """
    Fixture pour √©tablir la connexion √† Redmine.

    :return: Instance Redmine connect√©e avec la cl√© API.
    :rtype: redminelib.Redmine
    """
    try:
        client = Redmine(REDMINE_URL, key=API_KEY, requests={"verify": False})
        user = client.user.get('current')

        RdUser.pseudo = user.login
        RdUser.email = user.mail
        RdUser.user_id = user.id

        print(f"‚úÖ Connexion r√©ussie : {user.login} ({user.id})")

        return client
    except AuthError:
        pytest.exit("‚ùå √âchec de l'authentification : cl√© API invalide", returncode=1)
    except ResourceNotFoundError:
        pytest.exit("‚ùå Impossible de r√©cup√©rer les informations de l'utilisateur", returncode=1)

def test_redmine_userinfo():
    """
    V√©rifie que les informations de l'utilisateur connect√© sont bien r√©cup√©r√©es.
    """
    assert RdUser.pseudo, "L'utilisateur doit avoir un pseudo"
    assert RdUser.email, "L'utilisateur doit avoir une adresse e-mail"
    assert RdUser.user_id, "L'utilisateur doit avoir un identifiant"

def test_redmine_user_issues(redmine_client):
    """
    V√©rifie que l'utilisateur connect√© poss√®de des tickets ouverts et r√©cup√®re leurs informations.

    - R√©cup√®re la liste des tickets assign√©s √† l'utilisateur.
    - V√©rifie que des tickets existent.
    - Stocke les informations des tickets et des projets associ√©s dans `RdUser.issues` et `RdUser.projects`.
    """
    issues = redmine_client.issue.filter(
        assigned_to_id=RdUser.user_id,
        sort='project_id:asc;due_date:desc',
        status_id='open'
    )

    assert issues, "L'utilisateur n'a pas de demande assign√©e"

    for issue in issues:
        project = issue.project
        if project.id not in RdUser.projects:
            RdUser.projects[project.id] = {
                'name': project.name,
                'categories': [(cat.id, cat.name) for cat in project.issue_categories],
                'trackers': [(cat.id, cat.name) for cat in project.trackers],
                'time_entry_activities': [(cat.id, cat.name) for cat in project.time_entry_activities]
            }

        RdUser.issues[issue.id] = {
            'subject': issue.subject,
            'priority': issue.priority.name,
            'tracker': (issue.tracker.id, issue.tracker.name),
            'category': (issue.category.id, issue.category.name) if hasattr(issue, "category") else (),
            'description': issue.description,
            'due_date': issue.due_date,
        }

    print(f"‚úÖ {len(RdUser.issues)} tickets r√©cup√©r√©s")

def test_redmine_time_entry(redmine_client):
    """
    V√©rifie la cr√©ation d'une entr√©e de temps sur un ticket sp√©cifique.

    - Cr√©e une entr√©e de temps sur le ticket ID 1077.
    - V√©rifie que l'entr√©e de temps a bien √©t√© enregistr√©e.
    """
    time_entry = redmine_client.time_entry.create(
        issue_id=1077,
        spent_on=datetime.date.today(),
        hours=0.1,
        activity_id=28,
        user_id=RdUser.user_id,
        comments='open'
    )

    assert time_entry, "L'entr√©e de temps n'a pas √©t√© enregistr√©e"
    print("‚úÖ Enregistrement de temps r√©ussi")
